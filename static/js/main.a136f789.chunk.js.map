{"version":3,"sources":["components/Cards/Cards.js","components/Wrapper/Wrapper.js","components/Count/Count.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleCards","Wrapper","children","Count","total","status","App","state","animals","clickedAnimals","count","goal","_this","includes","setState","push","length","i","j","Math","floor","random","_ref","_this2","this","classname","components_Count_Count","components_Wrapper_Wrapper","map","animal","components_Cards_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0rDAUeA,SAPD,SAAAC,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,GAC9CC,QAAS,kBAAMV,EAAMW,aAAaX,EAAMS,KAAKL,UAAU,eCApDQ,SAHC,SAAAZ,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,YCMrBC,SAPD,SAAAd,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,oBAAwCJ,EAAMe,OAC9Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcJ,EAAMgB,kBC+D3BC,oNA5DbC,MAAQ,CACNC,UACAC,eAAgB,GAChBC,MAAO,EACPC,KAAM,GACNN,OAAQ,MAIVL,aAAe,SAAAF,GACb,IAAIW,EAAiBG,EAAKL,MAAME,eAEhC,GAAGA,EAAeI,SAASf,GACzBc,EAAKE,SAAS,CAAEL,eAAgB,GAAIC,MAAO,EAAGL,OAAQ,iFAOtD,GAHAI,EAAeM,KAAKjB,GAGS,KAA1BW,EAAeO,OAAlB,CAKAJ,EAAKE,SAAS,CAAEN,UAASC,iBAAgBC,MAAOD,EAAeO,OAAQX,OAAQ,MAE/E,IAAK,IAAIY,EAAIT,EAAQQ,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAC3C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADGK,EAEhB,CAACd,EAAQU,GAAIV,EAAQS,IAA/CT,EAAQS,GAFkCK,EAAA,GAE9Bd,EAAQU,GAFsBI,EAAA,SAN3CV,EAAKE,SAAS,CAACJ,MAAO,GAAIL,OAAQ,2IAc/B,IAAAkB,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,cACAH,EAAAC,EAAAC,cAAA,KAAGiC,UAAU,aAAb,iFAIFnC,EAAAC,EAAAC,cAACkC,EAAD,CAAOtB,MAAOoB,KAAKjB,MAAMG,MAAOC,KAAM,GAAIN,OAAQmB,KAAKjB,MAAMF,SAE7Df,EAAAC,EAAAC,cAACmC,EAAD,KACGH,KAAKjB,MAAMC,QAAQoB,IAAI,SAAAC,GAAM,OAC5BvC,EAAAC,EAAAC,cAACsC,EAAD,CACE9B,aAAcuB,EAAKvB,aACnBF,GAAI+B,EAAO/B,GACXiC,IAAKF,EAAO/B,GACZD,MAAOgC,EAAOhC,mBAtDVmC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a136f789.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Cards.css\"\r\n\r\nconst Cards = props => (\r\n    <div className=\"card img-container hover\">\r\n        <img alt={props.name} src={props.image} id={props.id}\r\n            onClick={() => props.shuffleCards(props.id)} className='shuffle' />\r\n    </div>\r\n);\r\n\r\nexport default Cards;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => \r\n    <div className=\"wrapper\">{props.children}</div>\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Count.css\"\r\n\r\nconst Count = props  => (\r\n    <div className=\"gameCount\">\r\n        <h2 className=\"count\">Correct Guesses: {props.total}</h2>\r\n        <h2 className=\"gameStatus\">{props.status}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Count;","import React, { Component } from 'react';\nimport Cards from \"./components/Cards\";\nimport Wrapper from \"./components/Wrapper\";\nimport Count from \"./components/Count\";\nimport animals from \"./animals.json\";\nimport './App.css';\n\nclass App extends Component {\n  // set initial state\n  state = {\n    animals,\n    clickedAnimals: [],\n    count: 0,\n    goal: 12,\n    status: \"\"\n  };\n\n  // shuffle cards every time one is clicked\n  shuffleCards = id => {\n    let clickedAnimals = this.state.clickedAnimals;\n\n    if(clickedAnimals.includes(id)) {\n      this.setState({ clickedAnimals: [], count: 0, status: \"Oops, you already clicked that one, click another animal to play again!\"});\n      return;\n    }\n    else {\n      clickedAnimals.push(id)\n    }\n\n      if(clickedAnimals.length === 12){\n        this.setState({count: 12, status: \"Congratulations, you won! Click another animal to play again!\"});\n        return;\n      }\n\n      this.setState({ animals, clickedAnimals, count: clickedAnimals.length, status: \" \"});\n\n      for (let i = animals.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [animals[i], animals[j]] = [animals[j], animals[i]];\n      }\n  }\n\n\n  // render card images over each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Zoo Clicky</h1>\n          <p classname=\"App-intro\">\n            Click all of the zoo animals without clicking the same image more than once!\n          </p>\n        </header>\n        <Count total={this.state.count} goal={12} status={this.state.status} />\n\n        <Wrapper>\n          {this.state.animals.map(animal => (\n            <Cards\n              shuffleCards={this.shuffleCards}\n              id={animal.id}\n              key={animal.id}\n              image={animal.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}